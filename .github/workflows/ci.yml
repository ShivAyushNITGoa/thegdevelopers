name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  actions: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        continue-on-error: false

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint_report.json
          if-no-files-found: ignore
          retention-days: 7

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        continue-on-error: false

      - name: Run tests
        id: run-tests
        run: npm run test -- --ci --coverage
        continue-on-error: true

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
          if-no-files-found: warn
          retention-days: 7

      - name: Check test results
        if: steps.run-tests.outcome != 'success'
        run: |
          echo "Tests failed! Check the test report for details."
          exit 1

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        continue-on-error: false
    
      - name: Build all apps and packages
        id: build
        run: |
          npm run build
          echo "status=success" >> $GITHUB_OUTPUT
        continue-on-error: true
    
      - name: Archive build artifacts
        if: steps.build.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
          retention-days: 1
    
      - name: Report build failure
        if: steps.build.outputs.status != 'success'
        run: |
          echo "Build failed! Check the build logs for details."
          exit 1

  deploy:
    name: Deploy
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        id: deploy
        run: |
          vercel --cwd apps/main deploy --prod --token="${{ secrets.VERCEL_TOKEN }}" || exit_code=$?
          if [ -n "$exit_code" ]; then
            echo "Deployment failed with exit code $exit_code"
            exit 1
          fi
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Notify on deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const scriptPath = require('path').resolve('.github/scripts/notify-deployment.js');
            require(scriptPath)({
              github,
              context,
              status: '${{ job.status }}',
              core,
            });

  accessibility-check:
    name: Accessibility Check
    needs: deploy
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility checks
        id: a11y-check
        run: npm run accessibility-check
        continue-on-error: true

      - name: Generate accessibility report
        if: always()
        run: npm run generate-a11y-report

      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: accessibility-report/
          if-no-files-found: warn
          retention-days: 7

      - name: Check accessibility result
        if: steps.a11y-check.outcome == 'failure'
        run: |
          echo "Accessibility checks found issues. See the report for details."

  performance-check:
    name: Performance Check
    needs: deploy
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        id: lighthouse
        run: npm run lighthouse
        continue-on-error: true

      - name: Upload Lighthouse report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse/
          if-no-files-found: warn
          retention-days: 7
      
      - name: Check performance result
        if: steps.lighthouse.outcome == 'failure'
        run: |
          echo "Performance checks found issues. See the Lighthouse report for details."

  notify:
    name: Notification
    needs: [deploy, accessibility-check, performance-check]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send status notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ needs.deploy.result }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: |
            Deployment: ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}
            Accessibility: ${{ needs.accessibility-check.result == 'success' && '✅ Passed' || needs.accessibility-check.result == 'failure' && '⚠️ Issues found' || '⚠️ Check skipped' }}
            Performance: ${{ needs.performance-check.result == 'success' && '✅ Passed' || needs.performance-check.result == 'failure' && '⚠️ Issues found' || '⚠️ Check skipped' }}
          SLACK_FOOTER: "GDevelopers CI/CD Pipeline" 